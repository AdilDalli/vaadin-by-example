
UsingSessionAndUIScope.activeUIobjects     = Det finns aktuellt {0} UI objekt som \u00E4r aktivt/aktiva f\u00F6r denna session (Session ID <em>{1}</em>).
UsingSessionAndUIScope.currentUIsID        = ID f\u00F6r det aktuella UI objektet: 
UsingSessionAndUIScope.editVariables       = Redigera variabler med session eller UI scope:
UsingSessionAndUIScope.headline            = Arbeta med Vaadins session och UI scope
UsingSessionAndUIScope.openThisApplication = \u00D6ppna denna applikation i ett nytt f\u00F6nster eller tab i din webbl\u00E4sare <a href="#!{0}" target="_blank">med denna l\u00E4nk</a> och uppdatera din webbl\u00E4sarens inneh\u00E5ll efter du har redigerat variablerna med olika scope.
UsingSessionAndUIScope.overviewHeadline    = <h2>\u00D6versikt \u00F6ver alla variabler med UI scope i den aktuella sessionen.</h2>
UsingSessionAndUIScope.sessionScopedValue  = V\u00E4rde med session-scope:
UsingSessionAndUIScope.shortDescription    = Det h\u00E4r exemplet viser de tv\u00E5 olika scope f\u00F6r variabler i en Vaadin 7 session. De \u00E4r det vanliga session scopet och det nya UI scopet. UI scopet omfattar alla data som beh\u00F6vs f\u00F6r inneh\u00E5llet av en webbl\u00E4sarens f\u00F6nster eller tab som \u00F6ppnades fr\u00E5n densamma session. P\u00E5 det h\u00E4r exemplet du kan redigera en variabel med session scope och en med UI scope. Sedan visas att f\u00F6r varje f\u00F6nster som \u00F6ppnades fr\u00E5n densamma session ett nytt UI objekt skapas som inneh\u00E5ller sin egen version av variablen med UI scope.
UsingSessionAndUIScope.uiScopedValue       = V\u00E4rde med UI-scope:

aboutText = Vaadin By Example demo applikationen st\u00E4llas till f\u00F6rfogande fr\u00E5n Roland Kr\u00FCger.\r\n<p>The Vaadin-By-Example demo application is written and maintained by me, Roland Kr\u00FCger. This application is meant to serve as a playground to provide working examples accompanying my blog posts about Vaadin and the Vaadin addons developed by me. It can be expected that this application will be extended in the future with new demos as I publish the next blog posts or Vaadin addons.</p>\r\n\r\n<h2>About Me</h2>\r\n<p>I work as a software developer, trainer, and consultant for the Germany-based company <a href="http://www.oio.de" target="_blank">Orientation in Objects GmbH</a>, located in Mannheim in southwest Germany. I regularly write about Vaadin and Java-related topics in <a href="http://blog.oio.de/author/rolandkrueger/" target="_blank">our company's blog</a>. In order to provide simple examples for the blog posts I write about Vaadin, I created the GitHub repository <a href="https://github.com/rolandkrueger/vaadin-by-example" target="_blank">vaadin-by-example</a>. This demo integrates most of these examples into one application.</p>\r\n\r\n<p>You can find me on <a href="https://twitter.com/Roland_Krueger" target="_blank">Twitter</a>, <a href="https://plus.google.com/107390769372631613806" target="_blank">Google+</a>, and <a href="https://github.com/rolandkrueger" target="_blank">Github</a>.</p>\r\n\r\n<h2>Credits</h2>\r\n<p>Credits for the icons used by this application go to <a href="http://www.famfamfam.com">Mark James</a> and <a href="http://glyphicons.com/">Glyphicons</a>. Credits for the background images go to <a href="http://www.backgroundlabs.com" title="Background Labs">Background Labs</a>.</p>

componentHighlighter.description      = <p>The Component Highlighter addon is aimed at supporting the Vaadin developer while she is in the process of writing a Vaadin application. The addon provides a component extension which will highlight the extended component in the browser with a visually striking label containing the fully qualified class name of the extended component or a user-defined text. By that, you can see which part of your UI is implemented by which Java class directly in the browser. The extension is only active when the Vaadin application is running in debug mode. In production mode, the addon will have no effect. A typical usage pattern for this addon is shown by the following code:</p>\r\n\r\n<pre class="sourcecode">\r\npublic class MyComponent extends CustomComponent {\r\n    ...\r\n    public MyComponent() {\r\n        super();\r\n        if (!VaadinService.getCurrent().getDeploymentConfiguration().isProductionMode()) {\r\n            new ComponentHighlighterExtension(this);\r\n        }\r\n        ...\r\n    }\r\n}</pre>\r\n\r\n<p>By that, the extension object will only be created in debug mode. In production mode, the extension will thus waste none of the session memory. Inside of the extension class, it is assured that even without checking for the production mode the extended component will only be augmented in the browser when running in debug mode.</p>\r\n\r\n<p>The highlighting label is not visible in a running application in normal mode. These labels can be activated by activating Vaadin's <span class="code">debug</span> mode using the <span class="code">?debug</span> URL parameter. This parameter will usually open the Vaadin debug console. If you have extended any component in your application with the ComponentHighlighter addon, the component will now be highlighted in the browser.</p>\r\n\r\n<p>This demo application makes intensive use of the addon. Using the following links, you can switch the highlighting labels on and off. This will work because the demo application is running in debug mode. The labels then decorate the DIV of the extended component and indicate the component implementation's class name.</p>\r\n\r\n<ul>\r\n    <li><a href="?debug#!/demo/ComponentHighlighterDemo">Switch highlighting labels on</a></li>\r\n    <li><a href="?debug=quiet#!/demo/ComponentHighlighterDemo">Switch labels on, but hide the debug console</a></li>\r\n    <li><a href="?#!/demo/ComponentHighlighterDemo">Switch the labels off</a></li>\r\n</ul>\r\n\r\n<h2>Usage</h2>\r\n<p>In order to use this addon in your own project, you have to add the addon's module descriptor to your own widget set descriptor:</p>\r\n\r\n<pre>\r\n&lt;module&gt;\r\n    &lt;inherits name="com.vaadin.DefaultWidgetSet" /&gt;\r\n    &lt;inherits name="org.vaadin.highlighter.ComponentHighlighterWidgetset" /&gt;\r\n&lt;/module&gt;\r\n</pre>\r\n\r\n<p>The <a href="https://vaadin.com/book" target="_blank">Book of Vaadin</a> extensively describes all necessary steps to include Vaadin addons into your project and how to compile your own widget set.</p>
componentHighlighter.headline         = Component Highlighter Addon
componentHighlighter.shortDescription = Vaadin addon for highlighting and describing a Vaadin component in debug mode.

demoselection.description = <p>F\u00F6ljande demos st\u00E5r till f\u00F6rfogande:</p>

home.description = <p>Welcome to the demo application for the <a href="https://github.com/rolandkrueger/vaadin-by-example" target="_blank">vaadin-by-example GitHub repository</a>. This demo provides working examples for most of the example projects in the repository. Furthermore it serves as demo application for the Vaadin addons provided by <a href="#!/about">me</a>. You can <a href="#!/demos">browse</a> each individual demo and get additional information about these on the respective demo page.\r\n</p>\r\n\r\n<h2>About The Demo Application</h2>\r\n<p>The source code of this demo application itself can be found in the <a href="https://github.com/rolandkrueger/vaadin-by-example/tree/master/all-in-one-demo" target="_blank">vaadin-by-example GitHub repository</a>. You can check it out and run the demo locally using the <a href="http://maven.apache.org/" target="_blank">Maven build tool</a>. All you need to do for that is to run the following command inside of the cloned project directory provided you have added the <span class="code">mvn</span> command to your <span class="code">PATH</span> variable:</p>\r\n\r\n<p class="sourcecode">$ mvn package jetty:run</p>\r\n\r\n<p>The demo application makes use of the <a href="http://www.springsource.org/" target="_blank">Spring framework</a> and <a href="http://projectlombok.org" target="_blank">Project Lombok</a>. In addition it uses my library <a href="https://github.com/rolandkrueger/AppBaseForVaadin" target="_blank">AppBaseForVaadin</a> which provides a basic framework for commonly used services in a web application, such as an event bus, templating for i18n (using Apache Velocity), or navigation.</p>\r\n\r\n<h2>Licensing</h2>\r\n<p>The source code for this demo application is licensed under the terms of the MIT license.</p>

i18nForCustomLayoutsUsingVelocity.description      = <p>This demo uses Apache Velocity templating for translating all of its CustomLayout templates. The demo description text you're reading right now is translated and maintained in a common Java resource bundle, as is the case with all the other translated texts of this application. You can change the language for this demo using the language selector combobox in the upper right corner.</p>\r\n\r\n<p>The template files used for instantiating the CustomLayouts contain references to the translation keys defined in the resource bundles. You can take a look, for example, at the CustomLayout template of the main page <a href="VAADIN/themes/demo/layouts/main.html" target="_blank">here</a> (open the source view for this page to see the document structure).</p>\r\n\r\n<p>Note that this demo uses a slightly different approach for templating than described in the accompanying blog post. Since this application uses the Spring framework, the Velocity engine is created and injected by Spring. Furthermore, this approach does not make use of Velocity's Resource Tool but instead uses Spring's MessageSource class to access the individual translations during the templating process. You can find the source code for this approach in service class <a href="https://github.com/rolandkrueger/AppBaseForVaadin/blob/master/src/main/java/org/vaadin/appbase/service/templating/impl/TemplatingService.java">TemplatingService</a>.</p>
i18nForCustomLayoutsUsingVelocity.headline         = i18n For CustomLayouts Using Apache Velocity
i18nForCustomLayoutsUsingVelocity.shortDescription = This example demonstrates how Vaadin CustomLayout templates can be localized with the Apache Velocity templating engine. By that, it is possible to translate static text used in CustomLayouts into a user's locale.
